version: '3.8'

services:
  # Banco de dados PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: garage_db
    environment:
      POSTGRES_DB: ${DB_NAME:-garageroute66}
      POSTGRES_USER: ${DB_USER:-garage_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-garage_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - garage_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-garage_user} -d ${DB_NAME:-garageroute66}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: garage_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - garage_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Aplicação Django
  web:
    build: .
    container_name: garage_web
    environment:
      - DEBUG=${DEBUG:-False}
      - SECRET_KEY=${SECRET_KEY}
      - DB_HOST=db
      - DB_NAME=${DB_NAME:-garageroute66}
      - DB_USER=${DB_USER:-garage_user}
      - DB_PASSWORD=${DB_PASSWORD:-garage_password}
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/1
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1}
      - COMPANY_NAME=${COMPANY_NAME:-GarageRoute66}
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - logs_volume:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - garage_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx (Proxy Reverso)
  nginx:
    image: nginx:alpine
    container_name: garage_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./docker/ssl:/etc/nginx/ssl
    depends_on:
      - web
    networks:
      - garage_network
    restart: unless-stopped

  # Celery Worker (opcional para tarefas assíncronas)
  celery:
    build: .
    container_name: garage_celery
    command: celery -A oficina worker -l info
    environment:
      - DEBUG=${DEBUG:-False}
      - SECRET_KEY=${SECRET_KEY}
      - DB_HOST=db
      - DB_NAME=${DB_NAME:-garageroute66}
      - DB_USER=${DB_USER:-garage_user}
      - DB_PASSWORD=${DB_PASSWORD:-garage_password}
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/1
    volumes:
      - logs_volume:/app/logs
    depends_on:
      - db
      - redis
    networks:
      - garage_network
    restart: unless-stopped

  # Celery Beat (agendamento de tarefas)
  celery-beat:
    build: .
    container_name: garage_celery_beat
    command: celery -A oficina beat -l info
    environment:
      - DEBUG=${DEBUG:-False}
      - SECRET_KEY=${SECRET_KEY}
      - DB_HOST=db
      - DB_NAME=${DB_NAME:-garageroute66}
      - DB_USER=${DB_USER:-garage_user}
      - DB_PASSWORD=${DB_PASSWORD:-garage_password}
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/1
    volumes:
      - logs_volume:/app/logs
    depends_on:
      - db
      - redis
    networks:
      - garage_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  logs_volume:
    driver: local

networks:
  garage_network:
    driver: bridge